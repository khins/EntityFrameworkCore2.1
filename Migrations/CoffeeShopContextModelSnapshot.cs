// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DemoStarter.Migrations
{
    [DbContext(typeof(CoffeeShopContext))]
    partial class CoffeeShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799");

            modelBuilder.Entity("BrewerType", b =>
                {
                    b.Property<int>("BrewerTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("BrewerTypeId");

                    b.ToTable("BrewerType");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CloseTime");

                    b.Property<string>("OpenTime");

                    b.Property<string>("StreetAddress");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new { LocationId = 1, CloseTime = "4PM", OpenTime = "6AM" }
                    );
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Acquired");

                    b.Property<int>("BrewerTypeId");

                    b.Property<int>("LocationId");

                    b.HasKey("UnitId");

                    b.HasIndex("LocationId");

                    b.ToTable("Unit");

                    b.HasData(
                        new { UnitId = 1, Acquired = new DateTime(2018, 6, 7, 20, 1, 46, 66, DateTimeKind.Local), BrewerTypeId = 1, LocationId = 1 }
                    );
                });

            modelBuilder.Entity("BrewerType", b =>
                {
                    b.OwnsOne("Recipe", "Recipe", b1 =>
                        {
                            b1.Property<int?>("BrewerTypeId");

                            b1.Property<int>("BrewTime");

                            b1.Property<string>("Description");

                            b1.Property<int>("GrindOunces");

                            b1.Property<int>("GrindSize");

                            b1.Property<int>("WaterOunces");

                            b1.Property<int>("WaterTemperatureF");

                            b1.ToTable("BrewerType");

                            b1.HasOne("BrewerType")
                                .WithOne("Recipe")
                                .HasForeignKey("Recipe", "BrewerTypeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.HasOne("Location")
                        .WithMany("BrewingUnits")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
